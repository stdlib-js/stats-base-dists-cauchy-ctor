{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-cauchy-entropy' );\nvar median = require( '@stdlib/stats-base-dists-cauchy-median' );\nvar mode = require( '@stdlib/stats-base-dists-cauchy-mode' );\nvar cdf = require( '@stdlib/stats-base-dists-cauchy-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-cauchy-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-cauchy-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-cauchy-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-cauchy-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction cauchyCDF( x ) {\n\treturn cdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction cauchyLogCDF( x ) {\n\treturn logcdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction cauchyLogPDF( x ) {\n\treturn logpdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction cauchyPDF( x ) {\n\treturn pdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction cauchyQuantile( p ) {\n\treturn quantile( p, this.x0, this.gamma );\n}\n\n\n// MAIN //\n\n/**\n* Cauchy distribution constructor.\n*\n* @constructor\n* @param {number} [x0=0.0] - location parameter\n* @param {PositiveNumber} [gamma=1.0] - scale parameter\n* @throws {TypeError} `gamma` must be a positive number\n* @returns {Cauchy} distribution instance\n*\n* @example\n* var cauchy = new Cauchy( 1.0, 1.0 );\n*\n* var y = cauchy.cdf( 0.8 );\n* // returns ~0.437\n*\n* var v = cauchy.median;\n* // returns 1.0\n*/\nfunction Cauchy() {\n\tvar gamma;\n\tvar x0;\n\tif ( !(this instanceof Cauchy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Cauchy();\n\t\t}\n\t\treturn new Cauchy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tx0 = arguments[ 0 ];\n\t\tgamma = arguments[ 1 ];\n\t\tif ( !isNumber( x0 ) || isnan( x0 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', x0 ) );\n\t\t}\n\t\tif ( !isPositive( gamma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', gamma ) );\n\t\t}\n\t} else {\n\t\tx0 = 0.0;\n\t\tgamma = 1.0;\n\t}\n\tdefineProperty( this, 'x0', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn x0;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tx0 = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'gamma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn gamma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tgamma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Cauchy distribution differential entropy.\n*\n* @name entropy\n* @memberof Cauchy.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var cauchy = new Cauchy( 4.0, 12.0 );\n*\n* var v = cauchy.entropy;\n* // returns ~5.016\n*/\nsetReadOnlyAccessor( Cauchy.prototype, 'entropy', function get() {\n\treturn entropy( this.x0, this.gamma );\n});\n\n/**\n* Cauchy distribution median.\n*\n* @name median\n* @memberof Cauchy.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var cauchy = new Cauchy( 4.0, 12.0 );\n*\n* var v = cauchy.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cauchy.prototype, 'median', function get() {\n\treturn median( this.x0, this.gamma );\n});\n\n/**\n* Cauchy distribution mode.\n*\n* @name mode\n* @memberof Cauchy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var cauchy = new Cauchy( 4.0, 12.0 );\n*\n* var v = cauchy.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cauchy.prototype, 'mode', function get() {\n\treturn mode( this.x0, this.gamma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.cdf( 0.5 );\n* // returns ~0.386\n*/\nsetReadOnly( Cauchy.prototype, 'cdf', cauchyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.logcdf( 0.5 );\n* // returns ~-0.952\n*/\nsetReadOnly( Cauchy.prototype, 'logcdf', cauchyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.logpdf( 0.8 );\n* // returns ~-2.617\n*/\nsetReadOnly( Cauchy.prototype, 'logpdf', cauchyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.pdf( 0.8 );\n* // returns ~0.073\n*/\nsetReadOnly( Cauchy.prototype, 'pdf', cauchyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Cauchy.prototype, 'quantile', cauchyQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Cauchy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution constructor.\n*\n* @module @stdlib/stats-base-dists-cauchy-ctor\n*\n* @example\n* var Cauchy = require( '@stdlib/stats-base-dists-cauchy-ctor' );\n*\n* var cauchy = new Cauchy( 1.0, 1.0 );\n*\n* var y = cauchy.cdf( 0.8 );\n* // returns ~0.437\n*\n* var mode = cauchy.mode;\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "isNumber", "isnan", "entropy", "median", "mode", "cdf", "logcdf", "logpdf", "pdf", "quantile", "format", "cauchyCDF", "x", "cauchyLogCDF", "cauchyLogPDF", "cauchyPDF", "cauchyQuantile", "p", "Cauchy", "gamma", "x0", "value", "main"]
}
